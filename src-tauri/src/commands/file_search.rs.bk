use crate::helper::file_search_helper::{create_file_data_threaded_csv, read_file_csv, CsvRecord};
use std::{sync::RwLock, thread::available_parallelism, time::Instant};

//
pub struct FileStorage {
    all_files: Vec<CsvRecord>,
    consider_hidden: bool,
}

pub static FILE_STORAGE: RwLock<FileStorage> = RwLock::new(FileStorage {
    all_files: Vec::new(),
    consider_hidden: false,
});

/**
 *
 */
pub fn read_file_in_cache(create_file: bool) {
    if let Ok(mut storage) = FILE_STORAGE.write() {
        //
        let res = read_file_csv(
            &tauri::api::path::home_dir().unwrap(),
            storage.consider_hidden,
            create_file,
        );
        //
        if let Ok(r) = res {
            storage.all_files = r;
        }
    }
}
/**
 *
 */
fn lowercase_match(line: &CsvRecord, query: &str) -> bool {
    line.path.to_lowercase().contains(&query.to_lowercase())
}
/**
 *
 */
fn generic_search_thread(
    query: &str,
    list: &Vec<CsvRecord>,
    search_fn: fn(&CsvRecord, &str) -> bool,
) -> Vec<CsvRecord> {
    //
    let mut matched_records: Vec<CsvRecord> = Vec::new();
    //
    let mut cpu_count: usize = 4;

    if let Ok(parallel) = available_parallelism() {
        cpu_count = parallel.get();
    }
    //
    std::thread::scope(|scope| {
        let mut handlers = Vec::new();
        //
        for n in 0..cpu_count {
            // run logic in tread
            // let cloned_query: String = String::clone(&query.to_string());
            let handler = scope.spawn(move || {
                //
                let mut matches: Vec<CsvRecord> = Vec::new();
                //
                let files_count = list.len();
                let split_size = (files_count / cpu_count) + 1;
                let index_start = n * split_size + n;
                let mut index_end = index_start + split_size;
                if index_end >= files_count {
                    index_end = files_count - 1;
                }
                //
                for index in index_start..index_end {
                    let line = list.get(index).unwrap();
                    if search_fn(&line, query) {
                        matches.push(line.clone());
                    }
                }

                matches
            });
            handlers.push(handler);
        }
        // join and get result
        for h in handlers {
            if let Ok(result) = h.join() {
                for i in result {
                    matched_records.push(i);
                }
            }
        }
    });

    return matched_records;
}

/**
 *
 */
#[tauri::command(async)]
pub async fn get_indexed_files(query: String, fetch_latest: bool) -> Vec<CsvRecord> {
    //
    let now = Instant::now();

    if fetch_latest {
        create_file_data_threaded_csv(&tauri::api::path::home_dir().unwrap(), true)
            .expect("not able to create indexing file");
    }

    let mut matched_strings: Vec<CsvRecord> = Vec::new();
    //
    if let Ok(storage) = FILE_STORAGE.read() {
        matched_strings =
            generic_search_thread(query.as_str(), &storage.all_files, lowercase_match);
    }
    //

    let mut top_matches: Vec<CsvRecord> = Vec::new();
    let mut size = 15;
    if matched_strings.len() < size {
        size = matched_strings.len();
    }
    for index in 0..size {
        top_matches.push(matched_strings[index].clone());
    }
    info!(
        "[get_indexed_files] Took {} milliseconds",
        now.elapsed().as_millis()
    );
    return top_matches;
}
